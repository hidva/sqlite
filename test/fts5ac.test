# 2014 June 17
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#*************************************************************************
# This file implements regression tests for SQLite library.  The
# focus of this script is testing the FTS5 module.
#
#

set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix fts5ac

# If SQLITE_ENABLE_FTS3 is defined, omit this file.
ifcapable !fts3 {
  finish_test
  return
}

do_execsql_test 1.0 {
  CREATE VIRTUAL TABLE xx USING fts5(x,y);
  INSERT INTO xx(xx) VALUES('pgsz=32');
}

set data {
    0   {p o q e z k z p n f y u z y n y}   {l o o l v v k}
    1   {p k h h p y l l h i p v n}         {p p l u r i f a j g e r r x w}
    2   {l s z j k i m p s}                 {l w e j t j e e i t w r o p o}
    3   {x g y m y m h p}                   {k j j b r e y y a k y}
    4   {q m a i y i z}                     {o w a g k x g j m w e u k}
    5   {k o a w y b s z}                   {s g l m m l m g p}
    6   {d a q i z h b l c p k j g k}       {p x u j x t v c z}
    7   {f d a g o c t i}                   {w f c x l d r k i j}
    8   {y g w u b q p o m j y b p a e k}   {r i d k y w o z q m a t p}
    9   {r k o m c c j s x m x m x m q r}   {y r c a q d z k n x n}
    10  {k j q m g q a j d}                 {d d e z g w h c d o o g x d}
    11  {j z u m o y q j f w e e w t r j w} {g m o r x n t n w i f g l z f}
    12  {s y w a w d o h x m k}             {c w k z b p o r a}
    13  {u t h x e g s k n g i}             {f j w g c s r}
    14  {b f i c s u z t k}                 {c k q s j u i z o}
    15  {n a f n u s w h y n s i q e w}     {x g e g a s s h n}
    16  {k s q e j n p}                     {t r j f t o e k k l m i}
    17  {g d t u w r o p m n m n p h b o u} {h s w o s l j e}
    18  {f l q y q q g e e x j r}           {n b r r g e i r t x q k}
    19  {f i r g o a w e p i l o a w}       {e k r z t d g h g i b d i e m}
    20  {l d u u f p y}                     {g o m m u x m g l j t t x x u}
    21  {m c d k x i c z l}                 {m i a i e u h}
    22  {w b f o c g x y j}                 {z d w x d f h i p}
    23  {w u i u x t c h k i b}             {b y k h b v r t g j}
    24  {h f d j s w s b a p k}             {a q y u z e y m m j q r}
    25  {d i x y x x k i y f s d j h z p n} {l l q m e t c w g y h t s v g}
    26  {g s q w t d k x g f m j p k y}     {r m b x e l t d}
    27  {j l s q u g y v e c l o}           {m f l m m m h g x x l n c}
    28  {c t j g v r s b z j}               {l c f y d t q n}
    29  {e x z y w i h l}                   {b n b x e y q e n u m}
    30  {g y y h j b w r}                   {q b q f u s k c k g r}
    31  {g u l x l b r c m z b u c}         {k g t b x k x n t e z d h o}
    32  {w g v l z f b z h p s c v h}       {g e w v m h k r g w a r f q}
    33  {c g n f u d o y o b}               {e y o h x x y y i z s b h a j}
    34  {v y h c q u u s q y x x k s q}     {d n r m y k n t i r n w e}
    35  {o u c x l e b t a}                 {y b a x y f z x r}
    36  {x p h l j a a u u j h}             {x o f s z m b c q p}
    37  {k q t i c a q n m v v}             {v r z e f m y o}
    38  {r w t t t t r v v o e p g h}       {l w x a g a u h y}
    39  {o p v g v b a g o}                 {j t q c r b b g y z}
    40  {f s o r o d t h q f x l}           {r d b m k i f s t d l m y x j w}
    41  {t m o t m f m f}                   {i p i q j v n v m b q}
    42  {t x w a r l w d t b c o d o}       {a h f h w z d n s}
    43  {t u q c d g p q x j o l c x c}     {m n t o z z j a y}
    44  {v d i i k b f s z r v r z y}       {g n q y s x x m b x c l w}
    45  {p v v a c s z y e o l}             {m v t u d k m k q b d c v z r}
    46  {f y k l d r q w r s t r e}         {h m v r r l r r t f q e x y}
    47  {w l n l t y x}                     {n h s l a f c h u f l x x m v n o}
    48  {t n v i k e b p z p d j j l i o}   {i v z p g u e j s i k n h w d c}
    49  {z v x p n l t a j c}               {e j l e n c e t a d}
    50  {w u b x u i v h a i y m m r p m s} {s r h d o g z y f f x e}
    51  {d c c x b c a x g}                 {p r a j v u y}
    52  {f w g r c o d l t u e z h i}       {j l l s s b j m}
    53  {p m t f k i x}                     {u v y a z g w v v m x h i}
    54  {l c z g l o j i c d e b}           {b f v y w u i b e i y}
    55  {r h c x f x a d s}                 {z x y k f l r b q c v}
    56  {v x x c y h z x b g m o q n c}     {h n b i t g h a q b c o r u}
    57  {d g l o h t b s b r}               {n u e p t i m u}
    58  {t d y e t d c w u o s w x f c h}   {i o s v y b r d r}
    59  {l b a p q n d r}                   {k d c c d n y q h g a o p e x}
    60  {f r z v m p k r}                   {x x r i s b a g f c}
    61  {s a z i e r f i w c n y v z t k s} {y y i r y n l s b w i e k n}
    62  {n x p r e x q r m v i b y}         {f o o z n b s r q j}
    63  {y j s u j x o n r q t f}           {f v k n v x u s o a d e f e}
    64  {u s i l y c x q}                   {r k c h p c h b o s s u s p b}
    65  {m p i o s h o}                     {s w h u n d m n q t y k b w c}
    66  {l d f g m x x x o}                 {s w d d f b y j j h h t i y p j o}
    67  {c b m h f n v w n h}               {i r w i e x r w l z p x u g u l s}
    68  {y a h u h i m a y q}               {d d r x h e v q n z y c j}
    69  {c x f d x o n p o b r t b l p l}   {m i t k b x v f p t m l l y r o}
    70  {u t l w w m s}                     {m f m o l t k o p e}
    71  {f g q e l n d m z x q}             {z s i i i m f w w f n g p e q}
    72  {n l h a v u o d f j d e x}         {v v s l f g d g r a j x i f z x}
    73  {x v m v f i g q e w}               {r y s j i k m j j e d g r n o i f}
    74  {g d y n o h p s y q z j d w n h w} {x o d l t j i b r d o r y}
    75  {p g b i u r b e q d v o a g w m k} {q y z s f q o h}
    76  {u z a q u f i f f b}               {b s p b a a d x r r i q f}
    77  {w h h z t h p o a h h e e}         {h w r p h k z v y f r x}
    78  {c a r k i a p u x}                 {f w l p t e m l}
    79  {q q u k o t r k z}                 {f b m c w p s s o z}
    80  {t i g v y q s r x m r x z e f}     {x o j w a u e y s j c b u p p r o}
    81  {n j n h r l a r e o z w e}         {v o r r j a v b}
    82  {i f i d k w d n h}                 {o i d z i z l m w s b q v u}
    83  {m d g q q b k b w f q q p p}       {j m q f b y c i z k y q p l e a}
    84  {m x o n y f g}                     {y c n x n q j i y c l h b r q z}
    85  {v o z l n p c}                     {g n j n t b b x n c l d a g j v}
    86  {z n a y f b t k k t d b z a v}     {r p c n r u k u}
    87  {b q t x z e c w}                   {q a o a l o a h i m j r}
    88  {j f h o x x a z g b a f a m i b}   {j z c z y x e x w t}
    89  {t c t p r s u c q n}               {z x l i k n f q l n t}
    90  {w t d q j g m r f k n}             {l e w f w w a l y q k i q t p c t}
    91  {c b o k l i c b s j n m b l}       {y f p q o w g}
    92  {f y d j o q t c c q m f j s t}     {f h e d y m o k}
    93  {k x j r m a d o i z j}             {r t t t f e b r x i v j v g o}
    94  {s f e a e t i h h d q p z t q}     {b k m k w h c}
    95  {h b n j t k i h o q u}             {w n g i t o k c a m y p f l x c p}
    96  {f c x p y r b m o l m o a}         {p c a q s u n n x d c f a o}
    97  {u h h k m n k}                     {u b v n u a o c}
    98  {s p e t c z d f n w f}             {l s f j b l c e s h}
    99  {r c v w i v h a t a c v c r e}     {h h u m g o f b a e o}
}

do_test 1.1 {
  foreach {id x y} $data {
    execsql { INSERT INTO xx(rowid, x, y) VALUES($id, $x, $y) }
  }
} {}

proc phrasematch {phrase value} {
  if {[string first $phrase $value]>=0} {
    return 1
  }
  return 0
}

# Usage:
#
proc nearmatch {nNear phraselist value} {
  set nPhrase [llength $phraselist]

  set phraselist [string tolower $phraselist]
  set value [string tolower $value]

  if {$nPhrase==1} {
    set bMatch [phrasematch [lindex $phraselist 0] $value]
  } else {
    set nValue [llength $value]
    if {$nNear >= $nValue} {set nNear [expr $nValue-1]}

    for {set i $nNear} {$i < $nValue} {incr i} {
      set bMatch 1
      foreach phrase $phraselist {
        set iMin [expr $i - $nNear - [llength $phrase]]
        set iMax [expr $i - 1 + [llength $phrase]]
        set subdoc [lrange $value $iMin $iMax]
        if {![phrasematch $phrase $subdoc]} {
          set bMatch 0
          break
        }
      }
      if {$bMatch} break
    }
  }
  return $bMatch
}

# Usage:
#
#   nearset aCol ?-near N? ?-col C? -- phrase1 phrase2...
#
proc nearset {aCol args} {
  set O(-near) 10
  set O(-col)  -1

  set nOpt [lsearch -exact $args --]
  if {$nOpt<0} { error "no -- option" }

  foreach {k v} [lrange $args 0 [expr $nOpt-1]] {
    if {[info exists O($k)]==0} { error "unrecognized option $k" }
    set O($k) $v
  }

  set phraselist [lrange $args [expr $nOpt+1] end]

  set bMatch 0
  set iCol -1
  foreach col $aCol {
    incr iCol
    if {$O(-col)>=0 && $O(-col)!=$iCol} continue

    if {[nearmatch $O(-near) $phraselist $col]} {
      set bMatch 1
      break
    }
  }

  return $bMatch
}

proc matchdata {expr {print 0}} {
  set tclexpr [db one {SELECT fts5_expr_tcl($expr, 'nearset $cols', 'x', 'y')}]
  set res [list]
  foreach {id x y} $::data {
    set cols [list $x $y]
    if $tclexpr {
      set res [concat $id $res]
    }
  }
  if {$print} {
    puts $tclexpr
  }
  return $res
}

foreach {tn phrase} {
  1 "o"
  2 "b q"
  3 "e a e"
  4 "m d g q q b k b w f q q p p"
  5 "l o o l v v k"
  6 "a"
  7 "b"
  8 "c"
  9 "no"
  10 "L O O L V V K"
} {

  set expr "\"$phrase\""
  set res [matchdata $expr]

  do_execsql_test 1.2.$tn.[llength $res] { 
    SELECT rowid FROM xx WHERE xx match $expr
  } $res
}

# Test the "nearmatch" commnad.
#
do_test 2.0 { nearmatch 2 {a b} {a x x b} } 1
do_test 2.1 { nearmatch 2 {b a} {a x x b} } 1
do_test 2.2 { nearmatch 1 {b a} {a x x b} } 0
do_test 2.3 { nearmatch 1 {"a b" "c d"} {x x a b x c d} } 1
do_test 2.4 { nearmatch 1 {"a b" "c d"} {x a b x x c d} } 0
do_test 2.5 { nearmatch 400 {a b} {a x x b} } 1
do_test 2.6 { nearmatch 0 {a} {a x x b} } 1
do_test 2.7 { nearmatch 0 {b} {a x x b} } 1

foreach {tn expr tclexpr} {
  1 {a b} {[N $x -- {a}] && [N $x -- {b}]}
} {
  do_execsql_test 3.$tn {SELECT fts5_expr_tcl($expr, 'N $x')} [list $tclexpr]
}

#-------------------------------------------------------------------------
#
foreach {tn expr} {
  1 { NEAR(r c) }
  2 { NEAR(r c, 5) }
  3 { NEAR(r c, 3) }
  4 { NEAR(r c, 2) }
  5 { NEAR(r c, 0) }
  6 { NEAR(a b c) }
  7 { NEAR(a b c, 8) }
  8  { x : NEAR(r c) }
  9  { y : NEAR(r c) }
  10 { x : "r c" }
  11 { y : "r c" }
  12 { a AND b }
  13 { a AND b AND c }
  14a { a }
  14b { a OR b }
  15 { a OR b AND c }
  16 { c AND b OR a }
  17 { c AND (b OR a) }
  18 { c NOT (b OR a) }
  19 { c NOT b OR a AND d }
} {
  set res [matchdata $expr]
  do_execsql_test 4.$tn.[llength $res] { 
    SELECT rowid FROM xx WHERE xx match $expr
  } $res
}



finish_test

